{"version":3,"sources":["Components/Header.js","Components/DisplayData.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","DisplayData","props","calcMaxPage","Math","ceil","state","data","length","rowsPerPage","handleData","headers","shift","cleanData","filter","row","setState","pageNum","getPage","currentPage","slice","sortData","column","ascending","tbody","document","getElementById","rows","unsorted","r","v1","querySelector","innerHTML","v2","isNaN","parseFloat","insertBefore","selectRowsPerPage","e","target","value","componentDidMount","prevProps","this","className","id","onChange","disabled","onClick","htmlFor","map","header","index","replace","key","Component","Footer","href","App","csvData","displayData","handleError","alert","cssClass","label","onFileLoaded","onError","inputId","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f010d433.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n\treturn (\n\t\t<header>\n\t\t\t<h1>CSV Reader</h1>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass DisplayData extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrentPage: [],\n\t\t\tdata: [],\n\t\t\theaders: [],\n\t\t\tpageNum: 1,\n\t\t\trowsPerPage: 20\n\t\t};\n\t}\n\n\tcalcMaxPage = () => {\n\t\t//calculating the max page number\n\t\treturn Math.ceil((this.state.data.length - 1) / this.state.rowsPerPage);\n\t};\n\n\thandleData = data => {\n\t\t//the first element of data array is an array of headers like id, names\n\t\tconst headers = data.shift();\n\n\t\t// clean up dirty data, filter out rows with missing data\n\t\tconst cleanData = this.props.data.filter(row => {\n\t\t\treturn row.length === headers.length;\n\t\t});\n\n\t\t// if current page number exceeds the new max page number, go to the new max page\n\t\tthis.setState({ data: cleanData, headers: headers }, () => {\n\t\t\tif (this.state.pageNum < this.calcMaxPage()) {\n\t\t\t\tthis.getPage(this.state.pageNum);\n\t\t\t} else {\n\t\t\t\tthis.getPage(this.calcMaxPage());\n\t\t\t}\n\t\t});\n\t};\n\n\tgetPage = pageNum => {\n\t\t//pagination based on the current page number and rows to show per page\n\t\t//get a slice of the csv data\n\t\tconst currentPage = this.state.data.slice(\n\t\t\t(pageNum - 1) * this.state.rowsPerPage,\n\t\t\tpageNum * this.state.rowsPerPage\n\t\t);\n\t\tthis.setState({ currentPage: currentPage, pageNum: pageNum });\n\t};\n\n\tsortData = (column, ascending) => {\n\t\tconst tbody = document.getElementById('tbody');\n\t\tconst rows = tbody.rows;\n\t\tlet unsorted = true;\n\t\t// loop until no sorting to be done\n\t\twhile (unsorted) {\n\t\t\t//start by saying no sorting is done:\n\t\t\tunsorted = false;\n\n\t\t\t//Loop through all tbody rows\n\t\t\tfor (let r = 0; r < rows.length - 1; r++) {\n\t\t\t\t// getting the two values to be compared, one from the current row, one from the next row\n\t\t\t\tconst v1 = rows[r].querySelector(`.${column}`).innerHTML;\n\t\t\t\tconst v2 = rows[r + 1].querySelector(`.${column}`).innerHTML;\n\n\t\t\t\t//check if the two rows should switch place, based on sorting order\n\t\t\t\t//if both values are numbers, compared by numerical value\n\t\t\t\t//for strings, follow localeCompare() rules\n\t\t\t\tif (\n\t\t\t\t\tascending\n\t\t\t\t\t\t? !isNaN(parseFloat(v1)) && !isNaN(parseFloat(v2))\n\t\t\t\t\t\t\t? parseFloat(v1) > parseFloat(v2)\n\t\t\t\t\t\t\t: v1 > v2\n\t\t\t\t\t\t: !isNaN(parseFloat(v1)) && !isNaN(parseFloat(v2))\n\t\t\t\t\t\t? parseFloat(v1) < parseFloat(v2)\n\t\t\t\t\t\t: v1 < v2\n\t\t\t\t) {\n\t\t\t\t\t// insert the sorted rows to tbody\n\t\t\t\t\ttbody.insertBefore(rows[r + 1], rows[r]);\n\t\t\t\t\tunsorted = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tselectRowsPerPage = e => {\n\t\t// show only certain number of rows based on user's preference\n\t\tlet rowsPerPage = e.target.value;\n\t\tthis.setState({ rowsPerPage: rowsPerPage }, () => {\n\t\t\t// if current page number exceeds the new max page number, go to the new max page\n\t\t\tif (this.state.pageNum < this.calcMaxPage()) {\n\t\t\t\tthis.getPage(this.state.pageNum);\n\t\t\t} else {\n\t\t\t\tthis.getPage(this.calcMaxPage());\n\t\t\t}\n\t\t\tthis.sortData('Id', true);\n\t\t});\n\t};\n\n\tcomponentDidMount = () => {\n\t\tthis.handleData(this.props.data);\n\t};\n\n\tcomponentDidUpdate(prevProps) {\n\t\t//when new csv file is uploaded\n\t\tif (this.props.data !== prevProps.data) {\n\t\t\tthis.handleData(this.props.data);\n\t\t\tthis.sortData('Id', true);\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<section className='data'>\n\t\t\t\t<label>\n\t\t\t\t\tShow\n\t\t\t\t\t<select id='rowsPerPage' onChange={this.selectRowsPerPage}>\n\t\t\t\t\t\t<option value='20'>20</option>\n\t\t\t\t\t\t<option value='50'>50</option>\n\t\t\t\t\t\t<option value='100'>100</option>\n\t\t\t\t\t\t<option value='200'>200</option>\n\t\t\t\t\t\t{/* max set to 200 for sorting performance */}\n\t\t\t\t\t</select>\n\t\t\t\t\trows per page\n\t\t\t\t</label>\n\t\t\t\t{/* if already at first page, disable prev button */}\n\t\t\t\t{this.state.pageNum === 1 ? (\n\t\t\t\t\t<button className='nav' disabled>\n\t\t\t\t\t\t&lt; <span className='visuallyHidden'>previous page</span>\n\t\t\t\t\t</button>\n\t\t\t\t) : (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='nav'\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.getPage(this.state.pageNum - 1);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t&lt; <span className='visuallyHidden'>previous page</span>\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\n\t\t\t\t<label htmlFor='pageNum'>\n\t\t\t\t\t<span className='visuallyHidden'>current page</span>\n\t\t\t\t\t{this.state.pageNum}\n\t\t\t\t</label>\n\n\t\t\t\t{this.state.pageNum === this.calcMaxPage() ? (\n\t\t\t\t\t<button className='nav' disabled>\n\t\t\t\t\t\t&gt; <span className='visuallyHidden'>next page</span>\n\t\t\t\t\t</button>\n\t\t\t\t) : (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='nav'\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.getPage(this.state.pageNum + 1);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t&gt; <span className='visuallyHidden'>next page</span>\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t\t<div className='scroll'>\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t{this.state.headers.map((header, index) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\t\t\tclassName='header'\n\t\t\t\t\t\t\t\t\t\t\tid={`header${header.replace(/\\s/g, '')}`}\n\t\t\t\t\t\t\t\t\t\t\tkey={`header${index}`}>\n\t\t\t\t\t\t\t\t\t\t\t{header.replace(/_/g, ' ')}\n\t\t\t\t\t\t\t\t\t\t\t<div className='buttons'>\n\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.sortData(header.replace(/\\s/g, ''), true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='sort'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='visuallyHidden'>Ascending</span>▲\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.sortData(header.replace(/\\s/g, ''), false);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='sort'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='visuallyHidden'>Descending</span>▼\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody id='tbody'>\n\t\t\t\t\t\t\t{this.state.currentPage.map(row => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t{row.map((value, index) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<td\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`${this.state.headers[index].replace(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/\\s/g,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}`}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{value}\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t);\n\t}\n}\n\nexport default DisplayData;\n","import React from 'react';\n\nconst Footer = () => {\n\treturn (\n\t\t<footer>\n\t\t\t<p>\n\t\t\t\t<a href='https://github.com/norazheng'>Nora Zheng</a> © 2019\n\t\t\t</p>\n\t\t</footer>\n\t);\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport Header from './Components/Header';\nimport CSVReader from 'react-csv-reader';\nimport DisplayData from './Components/DisplayData';\nimport Footer from './Components/Footer';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcsvData: [],\n\t\t\tdisplayData: false\n\t\t};\n\t}\n\n\thandleData = data => {\n\t\tthis.setState({ csvData: data, displayData: true });\n\t};\n\thandleError = () => {\n\t\talert('Something went wrong');\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<Header />\n\t\t\t\t<CSVReader\n\t\t\t\t\tcssClass='csvInput'\n\t\t\t\t\tlabel='Upload a .CSV file'\n\t\t\t\t\tonFileLoaded={this.handleData}\n\t\t\t\t\tonError={this.handleError}\n\t\t\t\t\tinputId='upload'\n\t\t\t\t/>\n\t\t\t\t{this.state.displayData ? (\n\t\t\t\t\t<DisplayData data={this.state.csvData} />\n\t\t\t\t) : (\n\t\t\t\t\t<div className='box'>\n\t\t\t\t\t\t<p>Your CSV data will be displayed here</p>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}