{"version":3,"sources":["Components/Header.js","Components/TableHeader.js","Components/DisplayData.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","TableHeader","props","toggleOrder","setState","ascending","state","this","id","key","column","sortData","content","className","onClick","Component","DisplayData","calcMaxPage","Math","ceil","data","length","rowsPerPage","handleData","propsData","headers","shift","cleanData","filter","row","pageNum","getPage","currentPage","slice","tbody","document","getElementById","rows","unsorted","r","v1","querySelector","innerHTML","v2","isNaN","parseFloat","insertBefore","selectRowsPerPage","e","prevRowsPerPage","parseInt","target","value","componentDidMount","prevProps","onChange","disabled","htmlFor","map","header","index","replace","Footer","href","App","loading","csvData","handleError","error","cssClass","label","onFileLoaded","onError","inputId","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21633149.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n\treturn (\n\t\t<header>\n\t\t\t<h1>CSV Reader</h1>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass TableHeader extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tascending: true\n\t\t};\n\t}\n\ttoggleOrder = () => {\n\t\tthis.setState({ ascending: !this.state.ascending });\n\t};\n\n\trender() {\n\t\tconst { ascending } = this.state;\n\t\tconst { id, key, column, sortData, content } = this.props;\n\t\treturn (\n\t\t\t<th>\n\t\t\t\t<button\n\t\t\t\t\tclassName='tHeader'\n\t\t\t\t\tid={id}\n\t\t\t\t\tkey={key}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsortData(column, ascending);\n\t\t\t\t\t\tthis.toggleOrder();\n\t\t\t\t\t}}>\n\t\t\t\t\t<span className='visuallyHidden'>\n\t\t\t\t\t\t{ascending ? 'sort in ascending order' : 'sort in descending order'}\n\t\t\t\t\t</span>\n\t\t\t\t\t{content}\n\t\t\t\t</button>\n\t\t\t</th>\n\t\t);\n\t}\n}\n\nexport default TableHeader;\n","import React, { Component } from 'react';\nimport TableHeader from './TableHeader';\n\nclass DisplayData extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrentPage: [],\n\t\t\tdata: [],\n\t\t\theaders: [],\n\t\t\tpageNum: 1,\n\t\t\trowsPerPage: 20\n\t\t};\n\t}\n\n\tcalcMaxPage = () => {\n\t\t//calculating the max page number\n\t\treturn Math.ceil((this.state.data.length - 1) / this.state.rowsPerPage);\n\t};\n\n\thandleData = data => {\n\t\tconst { data: propsData } = this.props;\n\t\t//the first element of data array is an array of headers like id, names\n\t\tconst headers = data.shift();\n\n\t\t// clean up dirty data, filter out rows with missing data\n\t\tconst cleanData = propsData.filter(row => {\n\t\t\treturn row.length === headers.length;\n\t\t});\n\n\t\t// if current page number exceeds the new max page number, go to the new max page\n\n\t\tthis.setState({ data: cleanData, headers }, () => {\n\t\t\tconst { pageNum } = this.state;\n\t\t\tif (pageNum < this.calcMaxPage()) {\n\t\t\t\tthis.getPage(pageNum);\n\t\t\t} else {\n\t\t\t\tthis.getPage(this.calcMaxPage());\n\t\t\t}\n\t\t});\n\t};\n\n\tgetPage = pageNum => {\n\t\tconst { data, rowsPerPage } = this.state;\n\t\t//pagination based on the current page number and rows to show per page\n\t\t//get a slice of the csv data\n\t\tconst currentPage = data.slice(\n\t\t\t(pageNum - 1) * rowsPerPage,\n\t\t\tpageNum * rowsPerPage\n\t\t);\n\n\t\tthis.setState({ currentPage, pageNum });\n\t};\n\n\tsortData = (column, ascending) => {\n\t\tconst tbody = document.getElementById('tbody');\n\t\tconst rows = tbody.rows;\n\t\tlet unsorted = true;\n\t\t// loop until no sorting to be done\n\t\twhile (unsorted) {\n\t\t\t//start by saying no sorting is done:\n\t\t\tunsorted = false;\n\n\t\t\t//Loop through all tbody rows\n\t\t\tfor (let r = 0; r < rows.length - 1; r++) {\n\t\t\t\t// getting the two values to be compared, one from the current row, one from the next row\n\t\t\t\tconst v1 = rows[r].querySelector(`.${column}`).innerHTML;\n\t\t\t\tconst v2 = rows[r + 1].querySelector(`.${column}`).innerHTML;\n\n\t\t\t\t//check if the two rows should switch place, based on sorting order\n\t\t\t\t//if both values are numbers, compared by numerical value\n\t\t\t\t//for strings, follow localeCompare() rules\n\n\t\t\t\tif (\n\t\t\t\t\tascending\n\t\t\t\t\t\t? !isNaN(parseFloat(v1)) && !isNaN(parseFloat(v2))\n\t\t\t\t\t\t\t? parseFloat(v1) > parseFloat(v2)\n\t\t\t\t\t\t\t: v1 > v2\n\t\t\t\t\t\t: !isNaN(parseFloat(v1)) && !isNaN(parseFloat(v2))\n\t\t\t\t\t\t? parseFloat(v1) < parseFloat(v2)\n\t\t\t\t\t\t: v1 < v2\n\t\t\t\t) {\n\t\t\t\t\t// insert the sorted rows to tbody\n\t\t\t\t\ttbody.insertBefore(rows[r + 1], rows[r]);\n\t\t\t\t\tunsorted = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tselectRowsPerPage = e => {\n\t\tconst { pageNum, headers } = this.state;\n\t\t// show only certain number of rows based on user's preference\n\t\tconst prevRowsPerPage = this.state.rowsPerPage;\n\t\tconst rowsPerPage = parseInt(e.target.value);\n\n\t\tthis.setState({ rowsPerPage }, () => {\n\t\t\t// if current page number exceeds the new max page number, go to the new max page\n\t\t\tif (pageNum < this.calcMaxPage()) {\n\t\t\t\tthis.getPage(pageNum);\n\t\t\t} else {\n\t\t\t\tthis.getPage(this.calcMaxPage());\n\t\t\t}\n\t\t\t// re-sort only when swithing to show more rows\n\t\t\tif (prevRowsPerPage < rowsPerPage) {\n\t\t\t\t//sort by first column by default\n\t\t\t\tthis.sortData(headers[0], true);\n\t\t\t}\n\t\t});\n\t};\n\n\tcomponentDidMount = () => {\n\t\tconst { data } = this.props;\n\t\tthis.handleData(data);\n\t};\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { data } = this.props;\n\t\tconst { headers } = this.state;\n\t\t//when new csv file is uploaded\n\t\tif (data !== prevProps.data) {\n\t\t\tthis.handleData(data);\n\t\t\t//sort by first column by default\n\t\t\tthis.sortData(headers[0], true);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { pageNum, headers, currentPage } = this.state;\n\n\t\treturn (\n\t\t\t<section className='data'>\n\t\t\t\t<label>\n\t\t\t\t\tShow\n\t\t\t\t\t<select id='rowsPerPage' onChange={this.selectRowsPerPage}>\n\t\t\t\t\t\t<option value='20'>20</option>\n\t\t\t\t\t\t<option value='50'>50</option>\n\t\t\t\t\t\t<option value='100'>100</option>\n\t\t\t\t\t\t<option value='200'>200</option>\n\t\t\t\t\t\t{/* max set to 200 for sorting performance */}\n\t\t\t\t\t</select>\n\t\t\t\t\trows per page\n\t\t\t\t</label>\n\t\t\t\t{/* if already at first page, disable prev button */}\n\t\t\t\t{pageNum === 1 ? (\n\t\t\t\t\t<button className='nav' disabled>\n\t\t\t\t\t\t&lt; <span className='visuallyHidden'>previous page</span>\n\t\t\t\t\t</button>\n\t\t\t\t) : (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='nav'\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.getPage(pageNum - 1);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t&lt; <span className='visuallyHidden'>previous page</span>\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\n\t\t\t\t<label htmlFor='pageNum'>\n\t\t\t\t\t<span className='visuallyHidden'>current page</span>\n\t\t\t\t\t{pageNum}\n\t\t\t\t</label>\n\n\t\t\t\t{pageNum === this.calcMaxPage() ? (\n\t\t\t\t\t<button className='nav' disabled>\n\t\t\t\t\t\t&gt; <span className='visuallyHidden'>next page</span>\n\t\t\t\t\t</button>\n\t\t\t\t) : (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='nav'\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.getPage(pageNum + 1);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t&gt; <span className='visuallyHidden'>next page</span>\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t\t<p>\n\t\t\t\t\tClick on a header to sort the table in ascending / descending order.\n\t\t\t\t</p>\n\t\t\t\t<div className='scroll'>\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t{headers.map((header, index) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<TableHeader\n\t\t\t\t\t\t\t\t\t\t\t// remove space\n\t\t\t\t\t\t\t\t\t\t\tid={`header${header.replace(/\\s/g, '')}`}\n\t\t\t\t\t\t\t\t\t\t\tkey={`header${index}`}\n\t\t\t\t\t\t\t\t\t\t\tcontent={header.replace(/_/g, ' ')}\n\t\t\t\t\t\t\t\t\t\t\tcolumn={header.replace(/\\s/g, '')}\n\t\t\t\t\t\t\t\t\t\t\tsortData={this.sortData}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody id='tbody'>\n\t\t\t\t\t\t\t{currentPage.map(row => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t{row.map((value, index) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<td className={`${headers[index].replace(/\\s/g, '')}`}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{value}\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t);\n\t}\n}\n\nexport default DisplayData;\n","import React from 'react';\n\nconst Footer = () => {\n\treturn (\n\t\t<footer>\n\t\t\t<p>\n\t\t\t\t<a href='https://github.com/norazheng'>Nora Zheng</a> © 2019\n\t\t\t</p>\n\t\t</footer>\n\t);\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Header from \"./Components/Header\";\nimport CSVReader from \"react-csv-reader\";\nimport DisplayData from \"./Components/DisplayData\";\nimport Footer from \"./Components/Footer\";\nimport \"./App.css\";\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcsvData: null, // Set to null so other message shows if no data.\n\t\t\tloading: false,\n\t\t\terror: \"\"\n\t\t};\n\t}\n\thandleData = data => {\n\t\tthis.setState({ loading: true, csvData: data }, () => {\n\t\t\tthis.setState({ loading: false });\n\t\t});\n\t};\n\thandleError = () => {\n\t\tthis.setState({ error: \"Something went wrong!\" });\n\t};\n\trender() {\n\t\tconst { loading, csvData, error } = this.state;\n\t\t// Display data not needed if only show if csvData\n\t\tif (loading) return <p>Loading</p>;\n\t\tif (error) return <p>{error}</p>;\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Header />\n\t\t\t\t<CSVReader\n\t\t\t\t\tcssClass=\"csvInput\"\n\t\t\t\t\tlabel=\"Upload a .CSV file\"\n\t\t\t\t\tonFileLoaded={this.handleData}\n\t\t\t\t\tonError={this.handleError}\n\t\t\t\t\tinputId=\"upload\"\n\t\t\t\t/>\n\t\t\t\t{csvData ? (\n\t\t\t\t\t<DisplayData data={csvData} />\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"box\">\n\t\t\t\t\t\t{error ? (\n\t\t\t\t\t\t\t<p>{error}</p>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<p>Your CSV data will be displayed here</p>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}