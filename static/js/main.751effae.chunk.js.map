{"version":3,"sources":["Components/Header.js","Components/DisplayData.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","DisplayData","props","calcMaxPage","Math","ceil","state","data","length","rowsPerPage","handleData","propsData","headers","shift","cleanData","filter","row","setState","pageNum","getPage","currentPage","slice","sortData","column","ascending","tbody","document","getElementById","rows","unsorted","r","v1","querySelector","innerHTML","v2","isNaN","parseFloat","insertBefore","selectRowsPerPage","e","target","value","componentDidMount","prevProps","this","className","id","onChange","disabled","onClick","htmlFor","map","header","index","replace","key","Component","Footer","href","App","loading","csvData","handleError","error","cssClass","label","onFileLoaded","onError","inputId","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.751effae.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n\treturn (\n\t\t<header>\n\t\t\t<h1>CSV Reader</h1>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass DisplayData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPage: [],\n      data: [],\n      headers: [],\n      pageNum: 1,\n      rowsPerPage: 20\n    };\n  }\n\n  calcMaxPage = () => {\n    //calculating the max page number\n    return Math.ceil((this.state.data.length - 1) / this.state.rowsPerPage);\n  };\n\n  handleData = data => {\n\n\t\n    const { data: propsData } = this.props;\n    //the first element of data array is an array of headers like id, names\n    const headers = data.shift();\n\n    // clean up dirty data, filter out rows with missing data\n    const cleanData = propsData.filter(row => {\n      return row.length === headers.length;\n    });\n\n    // if current page number exceeds the new max page number, go to the new max page\n\n    this.setState({ data: cleanData, headers }, () => {\n\n      const { pageNum } = this.state;\n      if (pageNum < this.calcMaxPage()) {\n        this.getPage(pageNum);\n      } else {\n        this.getPage(this.calcMaxPage());\n      }\n    });\n  };\n\n  getPage = pageNum => {\n\n    const { data, rowsPerPage } = this.state;\n    //pagination based on the current page number and rows to show per page\n    //get a slice of the csv data\n    const currentPage = data.slice(\n      (pageNum - 1) * rowsPerPage,\n      pageNum * rowsPerPage\n    );\n\n    this.setState({ currentPage, pageNum });\n  };\n\n  sortData = (column, ascending) => {\n    const tbody = document.getElementById(\"tbody\");\n    const rows = tbody.rows;\n    let unsorted = true;\n    // loop until no sorting to be done\n    while (unsorted) {\n      //start by saying no sorting is done:\n      unsorted = false;\n\n      //Loop through all tbody rows\n      for (let r = 0; r < rows.length - 1; r++) {\n        // getting the two values to be compared, one from the current row, one from the next row\n        const v1 = rows[r].querySelector(`.${column}`).innerHTML;\n        const v2 = rows[r + 1].querySelector(`.${column}`).innerHTML;\n\n        //check if the two rows should switch place, based on sorting order\n        //if both values are numbers, compared by numerical value\n\t\t\t\t//for strings, follow localeCompare() rules\n\t\t\t\t\n        if (\n          ascending\n            ? !isNaN(parseFloat(v1)) && !isNaN(parseFloat(v2))\n              ? parseFloat(v1) > parseFloat(v2)\n              : v1 > v2\n            : !isNaN(parseFloat(v1)) && !isNaN(parseFloat(v2))\n            ? parseFloat(v1) < parseFloat(v2)\n            : v1 < v2\n        ) {\n          // insert the sorted rows to tbody\n          tbody.insertBefore(rows[r + 1], rows[r]);\n          unsorted = true;\n        }\n      }\n    }\n  };\n\n  selectRowsPerPage = e => {\n    const { pageNum, headers } = this.state;\n    // show only certain number of rows based on user's preference\n    let rowsPerPage = e.target.value;\n\n    this.setState({ rowsPerPage }, () => {\n      // if current page number exceeds the new max page number, go to the new max page\n      if (pageNum < this.calcMaxPage()) {\n        this.getPage(pageNum);\n      } else {\n        this.getPage(this.calcMaxPage());\n\t\t\t}\n\t\t\t//sort by first column by default\n      this.sortData(headers[0], true);\n    });\n  };\n\n  componentDidMount = () => {\n    const { data } = this.props;\n    this.handleData(data);\n  };\n\n  componentDidUpdate(prevProps) {\n\n\t\tconst { data } = this.props;\n\t\tconst { headers } = this.state\n    //when new csv file is uploaded\n    if (data !== prevProps.data) {\n\t\t\tthis.handleData(data);\n\t\t\t//sort by first column by default\n      this.sortData(headers[0], true);\n    }\n  }\n\n  render() {\n\t\tconst { pageNum, headers, currentPage } = this.state;\n\n    return (\n      <section className=\"data\">\n        <label>\n          Show\n          <select id=\"rowsPerPage\" onChange={this.selectRowsPerPage}>\n            <option value=\"20\">20</option>\n            <option value=\"50\">50</option>\n            <option value=\"100\">100</option>\n            <option value=\"200\">200</option>\n            {/* max set to 200 for sorting performance */}\n          </select>\n          rows per page\n        </label>\n        {/* if already at first page, disable prev button */}\n        {pageNum === 1 ? (\n          <button className=\"nav\" disabled>\n            &lt; <span className=\"visuallyHidden\">previous page</span>\n          </button>\n        ) : (\n          <button\n            className=\"nav\"\n            onClick={() => {\n              this.getPage(pageNum - 1);\n            }}\n          >\n            &lt; <span className=\"visuallyHidden\">previous page</span>\n          </button>\n        )}\n\n        <label htmlFor=\"pageNum\">\n          <span className=\"visuallyHidden\">current page</span>\n          {pageNum}\n        </label>\n\n        {pageNum === this.calcMaxPage() ? (\n          <button className=\"nav\" disabled>\n            &gt; <span className=\"visuallyHidden\">next page</span>\n          </button>\n        ) : (\n          <button\n            className=\"nav\"\n            onClick={() => {\n              this.getPage(pageNum + 1);\n            }}\n          >\n            &gt; <span className=\"visuallyHidden\">next page</span>\n          </button>\n        )}\n        <div className=\"scroll\">\n          <table>\n            <thead>\n              <tr>\n                {headers.map((header, index) => {\n                  return (\n                    <th\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"header\"\n\t\t\t\t\t\t\t\t\t\t\t// remove space\n                      id={`header${header.replace(/\\s/g, \"\")}`}\n                      key={`header${index}`}\n                    >\n\t\t\t\t\t\t\t\t\t\t\t{/* replace underscore with space */}\n                      {header.replace(/_/g, \" \")}\n                      <div className=\"buttons\">\n                        <button\n                          onClick={() => {\n                            this.sortData(header.replace(/\\s/g, \"\"), true);\n                          }}\n                          className=\"sort\"\n                        >\n                          <span className=\"visuallyHidden\">Ascending</span>▲\n                        </button>\n                        <button\n                          onClick={() => {\n                            this.sortData(header.replace(/\\s/g, \"\"), false);\n                          }}\n                          className=\"sort\"\n                        >\n                          <span className=\"visuallyHidden\">Descending</span>▼\n                        </button>\n                      </div>\n                    </th>\n                  );\n                })}\n              </tr>\n            </thead>\n            <tbody id=\"tbody\">\n              {currentPage.map(row => {\n                return (\n                  <tr>\n                    {row.map((value, index) => {\n\t\t\t\t\t\t\t\t\t\t\n                      return (\n                        <td className={`${headers[0].replace(/\\s/g, \"\")}`}>\n                          {value}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default DisplayData;\n","import React from 'react';\n\nconst Footer = () => {\n\treturn (\n\t\t<footer>\n\t\t\t<p>\n\t\t\t\t<a href='https://github.com/norazheng'>Nora Zheng</a> © 2019\n\t\t\t</p>\n\t\t</footer>\n\t);\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Header from \"./Components/Header\";\nimport CSVReader from \"react-csv-reader\";\nimport DisplayData from \"./Components/DisplayData\";\nimport Footer from \"./Components/Footer\";\nimport \"./App.css\";\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcsvData: null, // Set to null so other message shows if no data.\n\t\t\tloading: false,\n\t\t\terror: \"\"\n\t\t};\n\t}\n\thandleData = data => {\n\t\tthis.setState({ loading: true, csvData: data }, () => {\n\t\t\tthis.setState({ loading: false });\n\t\t});\n\t};\n\thandleError = () => {\n\t\tthis.setState({ error: \"Something went wrong!\" });\n\t};\n\trender() {\n\t\tconst { loading, csvData, error } = this.state;\n\t\t// Display data not needed if only show if csvData\n\t\tif (loading) return <p>Loading</p>;\n\t\tif (error) return <p>{error}</p>;\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Header />\n\t\t\t\t<CSVReader\n\t\t\t\t\tcssClass=\"csvInput\"\n\t\t\t\t\tlabel=\"Upload a .CSV file\"\n\t\t\t\t\tonFileLoaded={this.handleData}\n\t\t\t\t\tonError={this.handleError}\n\t\t\t\t\tinputId=\"upload\"\n\t\t\t\t/>\n\t\t\t\t{csvData ? (\n\t\t\t\t\t<DisplayData data={csvData} />\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"box\">\n\t\t\t\t\t\t{error ? (\n\t\t\t\t\t\t\t<p>{error}</p>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<p>Your CSV data will be displayed here</p>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}